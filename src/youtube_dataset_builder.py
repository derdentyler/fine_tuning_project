import os
import yaml
from src.youtube_scraper import YouTubeScraper
from src.subtitle_preprocessor import SubtitlePreprocessor
from src.dataset_saver import DatasetSaver
from src.utils.logger_loader import LoggerLoader
from src.utils.config_loader import ConfigLoader


class YouTubeDatasetBuilder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å YouTube –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Å—ã–ª–æ–∫ –∏ –º–µ—Ç–æ–∫ –∏–∑ YAML-–∫–æ–Ω—Ñ–∏–≥–∞.
    """

    def __init__(self, config_path: str):
        """
        :param config_path: –ü—É—Ç—å –∫ YAML-–∫–æ–Ω—Ñ–∏–≥—É —Å –≤–∏–¥–µ–æ –∏ –º–µ—Ç–∫–∞–º–∏.
        """
        self.config = ConfigLoader(config_path).config
        self.logger = LoggerLoader().get_logger()


        if not self.config:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        self.subtitle_dir = self.config.get("subtitles_dir", "data/raw/")
        self.scraper = YouTubeScraper(self.subtitle_dir)

        self.output_dir = self.config.get("output_dir", "data/processed/")
        os.makedirs(self.output_dir, exist_ok=True)
        self.saver = DatasetSaver(os.path.join(self.output_dir, "dataset.json"))

        # –°—á–µ—Ç—á–∏–∫–∏
        self.total_videos = 0
        self.downloaded_subtitles = 0
        self.skipped_videos = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ


    def build_dataset(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON.
        """
        dataset = []
        categories = self.config.get("categories", {})

        for category, video_urls in categories.items():
            for url in video_urls:
                self.total_videos += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
                self.logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ {url} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

                try:
                    subtitle_path = self.scraper.download_subtitles(url)
                    if not subtitle_path:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {url}")
                        self.skipped_videos.append({"url": url, "reason": "–ù–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤"})
                        continue

                    self.downloaded_subtitles += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤

                    output_subtitle_path = subtitle_path.replace(".vtt", "_cleaned.txt")
                    preprocessor = SubtitlePreprocessor(subtitle_path, output_subtitle_path)
                    preprocessor.process()

                    # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    try:
                        with open(output_subtitle_path, "r", encoding="utf-8") as f:
                            processed_text = f.read()
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {output_subtitle_path}: {e}")
                        self.skipped_videos.append({"url": url, "reason": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"})
                        continue

                    if not processed_text:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ {url}")
                        self.skipped_videos.append({"url": url, "reason": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"})
                        continue

                    dataset.append({"category": category, "text": processed_text})

                except Exception as e:
                    self.logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {url}: {e}")
                    self.skipped_videos.append({"url": url, "reason": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ"})
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        if dataset:
            try:
                self.saver.save(dataset)
                self.logger.info(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.output_dir}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        else:
            self.logger.warning("‚ö†Ô∏è –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {self.downloaded_subtitles} –∏–∑ {self.total_videos} –≤–∏–¥–µ–æ")

        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        if self.skipped_videos:
            self.logger.warning("‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:")
            for item in self.skipped_videos:
                self.logger.warning(f"   ‚ùå {item['url']} ‚Äî {item['reason']}")

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {self.downloaded_subtitles} –∏–∑ {self.total_videos}")
        if self.skipped_videos:
            print("\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ:")
            for item in self.skipped_videos:
                print(f"   ‚ùå {item['url']} ‚Äî {item['reason']}")


if __name__ == "__main__":
    CONFIG_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "config.yaml"))

    builder = YouTubeDatasetBuilder(CONFIG_PATH)
    builder.build_dataset()
