import os
from src.youtube_scraper import YouTubeScraper
from src.subtitle_preprocessor import SubtitlePreprocessor
from src.dataset_saver import DatasetSaver
from src.utils.logger_loader import LoggerLoader
from src.utils.config_model import AppConfig  # Pydantic‚Äë–º–æ–¥–µ–ª—å


class YouTubeDatasetBuilder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å YouTube –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Å—ã–ª–æ–∫
    –∏ –º–µ—Ç–æ–∫ –∏–∑ Pydantic‚Äë–∫–æ–Ω—Ñ–∏–≥–∞ AppConfig.
    """

    def __init__(self, cfg: AppConfig):
        """
        :param cfg: —ç–∫–∑–µ–º–ø–ª—è—Ä AppConfig —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        """
        self.cfg = cfg
        self.logger = LoggerLoader().get_logger()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
        if not self.cfg:
            raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        self.subtitle_dir = cfg.subtitles_dir
        os.makedirs(self.subtitle_dir, exist_ok=True)
        self.scraper = YouTubeScraper(self.subtitle_dir)

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.output_dir = cfg.output_dir
        os.makedirs(self.output_dir, exist_ok=True)
        self.saver = DatasetSaver(os.path.join(self.output_dir, "dataset.json"))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_videos = 0
        self.downloaded_subtitles = 0
        self.skipped_videos = []

    def build_dataset(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON.
        """
        dataset = []
        for category, urls in self.cfg.categories.items():
            for url in urls:
                self.total_videos += 1
                self.logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {url} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
                try:
                    # 1) –°–∫–∞—á–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                    path = self.scraper.download_subtitles(url)
                    if not path:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Å–∞–±–æ–≤): {url}")
                        self.skipped_videos.append({"url": url, "reason": "–ù–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤"})
                        continue
                    self.downloaded_subtitles += 1

                    # 2) –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    cleaned = path.replace(".vtt", "_cleaned.txt")
                    SubtitlePreprocessor(path, cleaned).process()

                    # 3) –ß–∏—Ç–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    try:
                        text = open(cleaned, encoding="utf-8").read()
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cleaned}: {e}")
                        self.skipped_videos.append({"url": url, "reason": "–ß—Ç–µ–Ω–∏–µ —Å–∞–±–æ–≤"})
                        continue
                    if not text:
                        self.logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {url}")
                        self.skipped_videos.append({"url": url, "reason": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"})
                        continue

                    dataset.append({"category": category, "text": text})

                except Exception as e:
                    self.logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
                    self.skipped_videos.append({"url": url, "reason": "–û–±—â–∞—è –æ—à–∏–±–∫–∞"})
                    continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if dataset:
            try:
                self.saver.save(dataset)
                self.logger.info(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {self.output_dir}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        else:
            self.logger.warning("‚ö†Ô∏è –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç")

        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {self.downloaded_subtitles}/{self.total_videos} —Å–∞–±–æ–≤")
        if self.skipped_videos:
            self.logger.warning("‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:")
            for it in self.skipped_videos:
                self.logger.warning(f"   ‚ùå {it['url']} ‚Äî {it['reason']}")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.downloaded_subtitles}/{self.total_videos} —Å–∞–±–æ–≤")
        if self.skipped_videos:
            print("‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:")
            for it in self.skipped_videos:
                print(f"   ‚ùå {it['url']} ‚Äî {it['reason']}")